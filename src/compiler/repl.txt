; MIT License
;
; Copyright (c) 2018 - 2019 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.


(import cli)
(import io)

(import parser)
(import eval)
(import utils)
(import macro-expand)
(import transform)
(import translate)
(import generate)


(def javascript-context (eval/create-javascript-context! {}))

(defn load-std! [text]
  (-> (format (io/read! ["lib" "std" "macros.txt"] "utf-8") text)
      (parser/parse)
      (macro-expand/expand-macros)
      (each repl-eval!)))

(defn balance [text depth string? comment?]
  (cond
    (empty? text)        {:depth depth :string? string? :comment? false}
    comment?             (if (= (first text) \\n)
                           (recur (rest text) depth false false)
                           (recur (rest text) depth false true))
    string?              (cond
                           (= (first text) \\\) (recur (second-rest text) depth string? comment?)
                           (= (first text) \\") (recur (rest text) depth false false)
                           :else                (recur (rest text) depth true false))
    (= (first text) \;)  (recur (rest text) depth false true)
    (= (first text) \")  (recur (rest text) depth true false)
    (= (first text) \\\) (if (= (second text) \\\)
                           (recur (third-rest text) depth string? comment?)
                           (recur (second-rest text) depth string? comment?))
    :else                (recur (rest text)
                                (match (first text)
                                  \( (incr depth) \[ (incr depth) \{ (incr depth)
                                  \) (decr depth) \] (decr depth) \} (decr depth)
                                  depth)
                                string?
                                comment?)))

(defn balanced? [text-balance]
  (and (not text-balance/string?)
       (not text-balance/comment?)
       (= text-balance/depth 0)))

(defn handle-input [text]
  (let [text-balance (balance text 0 false false)]
    (if (balanced? text-balance)
      (repl! text)
      (cli/input! "| " (fn [line]
        (handle-input (format text "\n" line)))))))

(defn prompt! []
  (cli/input! "â–¶ " handle-input))

(defn repl-eval! [expr]
  (-> (transform/to-syntax-tree expr)
      (translate/translate-in {:statement-level false
                               :in-function false
                               :in-return false})
      (generate/generate)
      (eval/run-javascript-in! javascript-context)))

(defn repl! [text]
  (-> (format (io/read! ["lib" "std" "macros.txt"] "utf-8") text)
      (parser/parse)
      (macro-expand/expand-macros)
      (last)
      (repl-eval!)
      (prn) (print))
  (prompt!))
