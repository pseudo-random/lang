; MIT License
;
; Copyright (c) 2018 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

(import io)
(import parser)
(import module-system)
(import macro-expand)
(import transform)
(import translate)
(import generate)
(import symbol-table)

(defn front-end [path]
  (-> (concat (io/read! ["lib" "std" "macros.txt"] "utf-8") ; TODO
              (io/read! path "utf-8"))
      (parser/parse)
      (macro-expand/expand-macros)))

(defn back-end [expr]
  (-> (prepend expr :do)
      (transform/to-syntax-tree)
      (insert :type :root)
      (translate/translate)))

(defn compile-std [path]
  (let [expr    (front-end path)
        symbols (symbol-table/collect-symbols expr)
        ast     (back-end expr)]
    (module-system/to-module ast :std symbols)))

(defn compile-module [path]
  (let [expr         (front-end path)
        dependencies (module-system/collect-dependencies expr path)
        symbols      (symbol-table/collect-symbols expr)
        ast          (-> (back-end expr)
                         (module-system/to-module
                          (module-system/module-name path)
                          symbols))]
    (append (flat-map dependencies compile-module) ast)))

(defn compile [path]
  (let [modules (compile-module path)
        std     (compile-std ["lib" "std" "std.txt"])]
    (-> {:type    :root
         :std     std/children
         :modules modules
         :symbols (-> (map modules (curry nth :symbols))
                      (prepend std/symbols)
                      (reduce merge))}
        (generate/generate))))


(io/write! "out2.js"
           ;(compile ["src" "compiler" "parser.txt"])
           ;(compile ["src" "compiler" "eval.txt"])
           ;(compile ["src" "compiler" "exec.txt"])
           (compile ["src" "compiler" "compile.txt"])
           ;(compile ["test" "run-tests.txt"])
           "utf-8")
