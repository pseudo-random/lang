; MIT License
;
; Copyright (c) 2018 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

; TODO: Use (import eval [builtin*])
(import eval)
(def builtin* eval/builtin*)
(import utils)
(def call? utils/call?)
(def walk-quoted utils/walk-quoted)


(defn warn! [macro text]
  (print (format "WARNING: Macro " (->str macro) " " text))
  nil)

(def macro-global-scope
  {:print print
   :write write
   :warn! warn!
   :+ + :- - :* * :/ /
   :> > :< < := =

   :incr  incr :decr  decr

   :first first :second second
   :third third :fourth fourth
   :fifth fifth

   :list?   list?   :rest    rest
   :init    init    :last    last   :empty?  empty?
   :prepend prepend :append  append :concat  concat

   :not-empty?  not-empty? :second-rest second-rest
   :third-rest  third-rest :fourth-rest fourth-rest

  ; :map map :filter filter :reduce reduce :reject reject
   ;:fold fold :zip zip :zip-with zip-with

   :format      format

   :->str ->str :->symbol ->symbol :->int ->int})

(defn create-gensym [depth]
  (fn [sym]
    (-> (format (->str depth)
                (->str sym))
        (->symbol))))

(defn add-gensym-arg [expr]
  [:quote (-> (second expr)
              (append [:unquote :gensym]))])

(defn create-macro [expr macros]
  (let [body       (-> (third-rest expr)
                       (walk-expand macros 0))
        parameters (-> (third expr)
                       (add-gensym-arg))
        func-expr  (-> (prepend body parameters)
                       (prepend :fn*))]
    (eval/eval func-expr macro-global-scope)))

(defn find-macros [prog]
  (fold prog {} (fn [expr macros]
                  (if (call? expr :defmacro)
                    (insert macros (second expr) (create-macro expr macros))
                    macros))))

(defn macro? [expr macros]
  (and (list? expr)
       (not-empty? expr)
       (!= (nth macros (first expr)) nil)))

; Expand macros in expr
; TODO: Naming: expand-depth
(defn walk-expand [expr macros expand-depth]
  (cond
    (call? expr :quote)     (walk-quoted expr 0 (curry walk-expand macros expand-depth))

    (call? expr :defmacro) nil
    (macro? expr macros)   (walk-expand ((nth macros (first expr)) expr (create-gensym expand-depth))
                                        macros (incr expand-depth))

    (list? expr)           (map expr (curry walk-expand macros expand-depth))
    (array? expr)          (fold (keys expr) {} (fn [key new-expr]
                             (insert new-expr
                                     (walk-expand key macros expand-depth)
                                     (walk-expand (nth expr key) macros expand-depth))))
    :else                  expr))

(defn expand-macros [prog]
  (def macros (find-macros prog))
  (map prog (curry walk-expand macros 0)))

(import test)
(test/test "macro-expand/expand-macros"
  (expand-macros (quote ((defmacro when [expr]
                                          [:if (second expr)
                                             (prepend (rest (rest expr))
                                                      :do)
                                             nil])

                         (when true
                           1
                           2
                           3)))) = [nil [:if true [:do 1 2 3] nil]]
  (expand-macros (quote ((defmacro -> [expr]
                           (def* params (rest expr))
                           (if (empty? (rest params))
                             (first params)
                             (prepend (prepend (rest (last params))
                                               (init expr))
                                      (first (last params)))))

                         (a b c ->)
                         (-> a
                             (b)
                             (c))))) = [nil [:a :b :c :->] [:c [:b :a]]]

  (expand-macros (quote ((defmacro a [expr]
                           nil)
                         (quote (a 10))))) = [nil [:quote [:a 10]]]
  (expand-macros (quote ((defmacro a [expr]
                           (gensym :a))
                         (a)))) = [nil :0a]
  (expand-macros (quote ((defmacro a [expr]
                           [(gensym :a) (second expr)])
                         (a (a nil))))) = [nil [:0a [:1a nil]]])
