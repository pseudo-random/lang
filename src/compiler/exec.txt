; MIT License
;
; Copyright (c) 2018 - 2019 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

(import eval)
(import macro-expand)

(defn exec [prog]
  (-> (macro-expand/expand-macros prog)
      (prepend :do)
      (eval/eval macro-expand/macro-global-scope)))

(terpri)
(exec (quote
 ((defmacro fn [expr]
    (prepend (rest expr)
             :fn*))
  (defmacro def [expr]
    (prepend (rest expr)
             :def*))
  (defmacro defn [expr]
    [:def (second expr) (prepend (rest (rest expr)) :fn)])

  (defmacro -> [expr]
    (def* params (rest expr))
    (if (empty? (rest params))
      (first params)
      (prepend (prepend (rest (last params))
                        (init expr))
               (first (last params)))))

  (defmacro when [expr]
    [:if (second expr)
      (prepend (rest (rest expr))
               :do)
      nil])

  (defmacro unless [expr]
    [:if (second expr)
      nil
      (prepend (rest (rest expr))
               :do)])

  (defn not [x] (if x false true))
  (defn incr [x] (+ 1 x))
  (defn decr [x] (+ -1 x))

  (defn ^ [a b]
    (if (= b 0)
      1
      (* a (^ a (decr b)))))

  (defn map [list func]
    (if (empty? list)
      []
      (prepend
        (map (rest list) func)
        (func (first list)))))

  (defn range [from to]
    (defn range' [list index]
      (if (= index from)
        list
        (range' (prepend list (decr index))
                (decr index))))
     (range' [] to))

  (print (^ 2 8))
  (print (map (range 0 100) incr))
  )))
