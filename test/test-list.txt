; MIT License
;
; Copyright (c) 2018 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

(import test)

(test/test "list/first"
  (first [1 2 3])       = 1
  (first [-2 8 -5])     = -2
  (first "Hello World") = \H)

(test/test "list/second"
  (second [1 2 3])       = 2
  (second [-2 8 -5])     = 8
  (second "Hello World") = \e)

(test/test "list/rest"
  (rest [1 2 3])       = [2 3]
  (rest [0 2 4 6 8])   = [2 4 6 8]
  (rest "Hello World") = "ello World"
  (rest [1])           = [])

(test/test "list/second-rest"
  (second-rest [1 2 3])       = [3]
  (second-rest [-2 8 -5])     = [-5]
  (second-rest "Hello World") = "llo World")

(test/test "list/last"
  (last [1 2 3])   = 3
  (last [0 2 4 6]) = 6
  (last "abc")     = \c)

(test/test "list/nth"
  (nth [1 2 3] 1)   = 2
  (nth [1 2 3 4] 3) = 4
  (nth "abc" 1)     = \b)

(test/test "list/into"
  (into [\a \b \c] "") = "abc"
  (into "abc" [])      = [\a \b \c])

(test/test "list/empty?"
  (empty? [1 2 3]) = false
  (empty? [])      = true

  (empty? "abc")   = false
  (empty? "")      = true)

(test/test "list/not-empty?"
  (not-empty? [1 2 3]) = true
  (not-empty? [])      = false

  (not-empty? "abc")   = true
  (not-empty? "")      = false)

(test/test "list/empty-of"
  (empty-of [1 2 3]) = []
  (empty-of [])      = []

  (empty-of "Hello") = ""
  (empty-of "")      = "")

(test/test "list/prepend"
  (prepend [2 3] 1)   = [1 2 3]
  (prepend [] 0)      = [0]
  (prepend "ello" \H) = "Hello"
  (prepend "bc" \a)   = "abc")

(test/test "list/range"
  (range 0 10) = [0 1 2 3 4 5 6 7 8 9]
  (range -1 2) = [-1 0 1]
  (range 0 0)  = [])

(test/test "list/map"
  (map [1 2 3] incr)  = [2 3 4]
  (map [] incr)       = []
  (map [-1 1.2] incr) = [0 2.2]
  (map [1 2 3] decr)  = [0 1 2]

  (map "abc" (fn [x] x)) = "abc")

(test/test "list/filter"
  (filter [1 2 3 4 5] even?) = [2 4]
  (filter [1 2 3 4 5] odd?)  = [1 3 5]
  (filter [] even?)          = [])

(test/test "list/reject"
  (reject [1 2 3 4 5] even?) = [1 3 5]
  (reject [1 2 3 4 5] odd?)  = [2 4]
  (reject [] even?)          = [])

(test/test "list/reduce"
  (reduce [1 2 3] +)      = 6
  (reduce (range 1 11) +) = 55
  (reduce [1 2 3 4] *)    = 24
  (reduce [1] *)          = 1)

(test/test "list/sum"
  (sum [1 2 3]) = 6)

(test/test "list/zip"
  (zip [1 2 3] [4 5 6]) = [[1 4] [2 5] [3 6]]
  (zip [1 2 3] [4 5])   = [[1 4] [2 5]]
  (zip [1 2] [4 5 6])   = [[1 4] [2 5]]
  (zip [1 2 3 4 5] [])  = []
  (zip [0 1 2] [0 1 2]) = [[0 0] [1 1] [2 2]])

(test/test "list/zip-with"
  (zip-with [1 2 3] [4 5 6] +) = [5 7 9])

(test/test "list/drop"
  (drop [1 2 3 4] 2) = [3 4]
  (drop [1 2 3] 2)   = [3]
  (drop [2 4 8] 0)   = [2 4 8]

  (drop "Hello" 2) = "llo")

(test/test "list/take"
  (take [1 2 3] 2) = [1 2]
  (take [2 4]   0) = []
  (take [-1 -2] 2) = [-1 -2]

  (take "Hello" 2) = "He")

(test/test "list/drop-while"
  (drop-while [0 4 -2 3 2] even?)   = [3 2]
  (drop-while [0 4 -2 3 2] odd?)    = [0 4 -2 3 2]
  (drop-while [2 2 1 2 3] (curry = 2)) = [1 2 3])

(test/test "list/take-while"
  (take-while [0 4 -2 3 2] even?)   = [0 4 -2]
  (take-while [0 4 -2 3 2] odd?)    = []
  (take-while [2 2 1 2 3] (curry = 2)) = [2 2])

(test/test "list/slice"
  (slice [1 2 3] 1 2)     = [2]
  (slice [0 1 2 3 4] 1 4) = [1 2 3]
  (slice [0 1 2 3] 0 4)   = [0 1 2 3])

(test/test "list/concat"
  (concat [1 2 3] [4 5 6]) = [1 2 3 4 5 6]
  (concat [3 2 1] [])      = [3 2 1]
  (concat [] [3 2 1])      = [3 2 1]
  (concat [] [])           = []

  (concat "ab" "cd")       = "abcd")

(test/test "list/where"
  (where [3 2 4] [1] 1)            = [3 1 4]
  (where [[1] [2] [3 -4]] [2 1] 4) = [[1] [2] [3 4]])

(test/test "list/find"
  (find [1 2 3 4] (curry = 2))  = 2
  (find [1 2 3 4] (curry = -1)) = nil)

(test/test "list/any?"
  (any? [1 2 3 4] even?) = true
  (any? [0 2 4 6] odd?)  = false)

(test/test "list/every?"
  (every? [1 2 3 4] even?) = false
  (every? [0 2 4 6] even?) = true)

(test/test "list/reshape-width"
  (reshape-width [1 2 3 1 2 3 1 2 3] 3) = [[1 2 3] [1 2 3] [1 2 3]])

(test/test "list/split-at"
  (split-at [1 2 3 4 5 6] 3) = [[1 2 3] [4 5 6]]
  (split-at [1 1 2 3 5 8] 2) = [[1 1] [2 3 5 8]])

(test/test "list/split-while"
  (split-while [1 2 3 4] (curry <= 3))     = [[1 2 3] [4]]
  (split-while [1 2 3 4] even?)            = [[] [1 2 3 4]]

  (split-while "Abc123 XYZ" (fn [x] (or (letter? x)
                                        (digit? x)))) = ["Abc123" " XYZ"])

(test/test "list/flat-map"
  (flat-map [1 2 3] (fn [x] [x])) = [1 2 3]
  (flat-map [] (fn [x] [x]))      = []
  (flat-map [1] (fn [x] [x]))     = [1]

  (flat-map ["abc" "def"] (fn [x] x)) = [\a \b \c \d \e \f])

(test/test "list/join"
  (join [[1] [2] [3]] 0) = [1 0 2 0 3]
  (join [] 0)            = []
  (join [[1]] 0)         = [1])

(test/test "list/fold"
  (fold [1 2 3 4] 0 +) = 10
  (fold [1 2 3 4] 1 *) = 24)

(test/test "list/fold-2"
  (fold-2 [1 2 3 4] 0 (fn [a b acc] (+ acc (* a b)))) = 14)

(test/test "list/group-by"
  (group-by [] identity) = {}
  (group-by [1 1 2 3 2 2 4] identity) = {1 [1 1] 2 [2 2 2] 3 [3] 4 [4]}
  (group-by ["a" "b" "ab" "" ""] len) = {0 ["" ""] 1 ["b" "a"] 2 ["ab"]})

(test/test "list/reverse"
  (reverse [1 2 3]) = [3 2 1]
  (reverse [1 2])   = [2 1]
  (reverse [1])     = [1]
  (reverse [])      = []

  (reverse "abc")   = "cba"
  (reverse "Hello") = "olleH"
  (reverse "")      = "")

(test/test "list/repeat"
  (repeat 0 3)  = [0 0 0]
  (repeat :a 4) = [:a :a :a :a]
  (repeat [] 2) = [[] []]
  (repeat "" 1) = [""]
  (repeat 0 0)  = [])

(test/test "list/min"
  (min [1 2 3] identity) = 1
  (min [6 5 4] identity) = 4
  (min [3 1 2] identity) = 1
  (min [0 -1]  identity) = -1
  (min [1] identity)     = 1
  (min [0] identity)     = 0

  (min [[0 0] [0]] len)  = [0]
  (min [[0 0] []] len)   = [])

(test/test "list/max"
  (max [1 2 3] identity) = 3
  (max [6 5 4] identity) = 6
  (max [3 1 2] identity) = 3
  (max [0 -1]  identity) = 0
  (max [1] identity)     = 1
  (max [0] identity)     = 0

  (max [[0 0] [0]] len)  = [0 0]
  (max [[] []] len)      = [])

(test/test "list/sort"
  (sort [] <)            = []
  (sort [1 2 3] <)       = [1 2 3]
  (sort [3 2 1] <)       = [1 2 3]
  (sort [1 3 2] <)       = [1 2 3]
  (sort [1 3 2] >)       = [3 2 1]
  (sort (repeat 1 10) >) = (repeat 1 10)
  (sort (range 0 10) >)  = [9 8 7 6 5 4 3 2 1 0])

(test/test "list/sort-by"
  (sort-by [1 2 3] identity) = [1 2 3]
  (sort-by [3 2 1] identity) = [1 2 3]
  (sort-by [1 3 2] identity) = [1 2 3]
  (sort-by [] identity)      = []
  (sort-by [2 -1 0 -4] sign) = [-1 -4 0 2])

(test/test "list/transpose"
  (transpose [[1 2 3] [4 5 6]]) = [[1 4] [2 5] [3 6]]
  (transpose [[1 2 3] [4 5]])   = [[1 4] [2 5]]
  (transpose [])                = []
  (transpose ["ab" "cd"])       = [[\a \c] [\b \d]]
  (transpose [[1 2] [3 4] [5 6]]) = [[1 3 5] [2 4 6]]
  (transpose [[1 2 3]
              [4 5 6]
              [7 8 9]]) =  [[1 4 7]
                            [2 5 8]
                            [3 6 9]])
