; MIT License
;
; Copyright (c) 2018 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

(import test)

(test/test "math/int"
  (+ 1 2)   = 3
  (- 10 2)  = 8
  (* 3 4)   = 12
  (/ 100 4) = 25
  (% 4 2)   = 0
  (% 8 3)   = 2)

(test/test "math/sign"
  (sign 10)  = 1
  (sign 0)   = 0
  (sign -10) = -1

  (sign 123)  = 1
  (sign -123) = -1)

(test/test "math/incr"
  (incr 1)    = 2
  (incr 2)    = 3
  (incr -8)   = -7
  (incr 3.14) = 4.14)

(test/test "math/decr"
  (decr 1)    = 0
  (decr 2)    = 1
  (decr -8)   = -9
  (decr 3.14) = 2.14)

(test/test "math/pow"
  (^ 2 2) = 4
  (^ 3 0) = 1
  (^ 4 2) = 16
  (^ 5 3) = 125)

(test/test "math/div?"
  (div? 4 2) = true
  (div? 5 2) = false)

(test/test "math/even?"
  (even? 1)  = false
  (even? 0)  = true
  (even? 8)  = true
  (even? -2) = true)

(test/test "math/odd?"
  (odd? 1)  = true
  (odd? 0)  = false
  (odd? 8)  = false
  (odd? -3) = true)

(test/test "compare/="
  (= true true)   = true
  (= false false) = true
  (= false true)  = false
  (= false 0)     = false
  (= false 1)     = false

  (= 1 2)         = false
  (= 256 256)     = true
  (= 3.14 3.14)   = true
  (= 3.16 6.28)   = false

  (= [1 2] [1 2])  = true
  (= [1 2 3] [1])  = false
  (= [] :a)        = false
  (= [1 2] :a)     = false
  (= [1 2] "a")    = false
  (= [1] [2])      = false
  (= [\a \b] "ab") = false

  (= {} {})                   = true
  (= {:a 1 :b 2} {:a 1 :b 2}) = true
  (= {:a 2 :b 2} {:a 1 :b 2}) = false
  (= {:a 1 :b 2} {:a 1})      = false

  (= + +) = true
  (= + -) = false
  (= (typeof 1) (typeof 2))   = true
  (= (typeof 1.2) (typeof 2)) = false

  (= nil nil)   = true
  (= nil false) = false


  )

(test/test "compare/>="
  (>= 1 1) = true
  (>= 2 1) = true
  (>= 1 2) = false)

(test/test "compare/<="
  (<= 1 1) = true
  (<= 2 1) = false
  (<= 1 2) = true)

(test/test "bit/and"
  (bit-and 2 5) = 0
  (bit-and 3 5) = 1
  (bit-and 4 5) = 4)

(test/test "bit/or"
  (bit-or 1 2) = 3
  (bit-or 1 2) = 3
  (bit-or 2 2) = 2
  (bit-or 7 5) = 7)

(test/test "bit/xor"
  (bit-xor 5 7) = 2
  (bit-xor 2 1) = 3
  (bit-xor 2 2) = 0)

(test/test "bit/shift-left"
  (bit-shift-left 2 1) = 4
  (bit-shift-left 2 2) = 8
  (bit-shift-left 2 3) = 16
  (bit-shift-left 3 2) = 12)

(test/test "bit/shift-right"
  (bit-shift-right 2 1) = 1
  (bit-shift-right 2 2) = 0
  (bit-shift-right 2 3) = 0
  (bit-shift-right 8 3) = 1
  (bit-shift-right 6 1) = 3)

(test/test "boolean/not"
  (not true)  = false
  (not false) = true)

(test/test "boolean/and"
  (and 1 2)        = 2
  (and true false) = false
  (and true true)  = true)

(test/test "types/int?"
  (int? 1)    = true
  (int? [])   = false
  (int? true) = false
  (int? 1.2)  = false)

(test/test "types/symbol?"
  (symbol? :a)   = true
  (symbol? :abc) = true
  (symbol? 1)    = false
  (symbol? 2.2)  = false
  (symbol? [])   = false)

(test/test "types/->int"
  (->int 1.2)   = 1
  (->int \A)    = 65
  (->int \âœ“)    = 10003
  (->int \ğŸ›†)    = 128710
  (->int \Î»)    = 955
  (->int 2)     = 2
  (->int true)  = 1
  (->int false) = 0)

(test/test "types/->char"
  (->char 97)     = \a
  (->char 65)     = \A
  (->char 48)     = \0
  (->char 128710) = \ğŸ›†
  (->char 955)    = \Î»)

(test/test "types/->symbol"
  (->symbol "hello") = :hello
  (->symbol "abcde") = (->symbol "abcde")
  (->symbol "fghij") = (->symbol "fghij")

  (->symbol (->int :hello)) = :hello
  (->symbol (->int :world)) = :world

  (!= (->symbol "abcde") (->symbol "fghij")) = true)

(test/test "pattern/letter?"
  (letter? \q) = true
  (letter? \A) = true
  (letter? \z) = true
  (letter? \0) = false
  (letter? \-) = false
  (letter? \[) = false
  (letter? \]) = false)

(test/test "pattern/digit?"
  (digit? \0) = true
  (digit? \2) = true
  (digit? \9) = true
  (digit? \a) = false
  (digit? \X) = false)
