; MIT License
;
; Copyright (c) 2018 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

(import test)

(test/test "core/do"
  (do 1 2 3)           = 3
  (do "hello" "world") = "world")

(test/test "core/def"
  (do (def a 10) a)            = 10
  (do (def a "Hello") a)       = "Hello"
  (do (def a 10) (def b 20) a) = 10
  (do (def a 10) (def b 20) b) = 20)

(test/test "core/if"
  (if true 1 0)  = 1
  (if false 1 0) = 0

  (if 0 1 0) = 1
  (if 1 1 0) = 1

  (if 1.2 1 0) = 1
  (if 0.0 1 0) = 1

  (if [] 1 0)      = 1
  (if [1 2 3] 1 0) = 1)

(test/test "core/let"
  (let [x 2] (* x x)) = 4
  (let [x 3
        y 4]
    (+ x y))          = 7
  (let [x 2
        y x]
    (+ x y))          = 4)

(test/test "core/deftype"
  (do (deftype a b c) (= (a* 1 2) (a* 1 2))) = true
  (do (deftype a b c) (= (a* 1 2) (a* 0 1))) = false)

(test/test "core/fn"
  ((fn [a] a) 1)     = 1
  ((fn [a b] b) 1 2) = 2
  ((fn [a b] a) 1 2) = 1)

(test/test "core/fn/closure"
  (((fn [a] (fn [b] (+ a b))) 2) 3) = 5)

(test/test "core/apply"
  (apply incr [1]) = 2
  (apply incr [2]) = 3
  (apply + [2 3])  = 5)

(terpri)
(print "The next test should not pass:")
(test/test "test"
  true = false)
