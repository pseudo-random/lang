(import test)

(def test-data [
  [1 1]
  [1 2]
  [1.5 1.3]

  [3 4]
  [4 3]
  [3 3]
])

(defn column [matrix n]
  (map matrix (fn [row] (nth row n))))

(test/test "column"
  (column [[1 2 3]
           [4 5 6]
           [7 8 9]] 0) = [1 4 7]
  (column [[1 2 3]
           [4 5 6]
           [7 8 9]] 1) = [2 5 8])

(defn average [list]
  (def length (len list))
  (-> list
      (sum)
      (/ length)))

(defn find-mean [points]
  (-> points
      (transpose)
      (map average)))

(defn dist [a b]
  (-> (zip a b)
      (map (fn [x] (- (first x) (second x))))
      (map sq)
      (sum)
      (sqrt)))

(defn find-best [list better?]
  (fold (rest list) (first list) (fn [cur best]
    (if (better? cur best)
      cur
      best))))

(defn closer? [point a b]
  (< (dist point a) (dist point b)))

(defn closest [point means]
  (find-best means (fn [mean closest-mean]
    (closer? point mean closest-mean))))

(defn closest-mean? [point mean means]
  (= (closest point means) mean))

(defn k-means-iteration [data means]
  (map means (fn [mean]
    (-> (filter data (curry closest-mean? mean means))
        (find-mean)))))

(defn k-means [data means iter]
  (if (= iter 0)
    means
    (recur
      data
      (k-means-iteration data means)
      (decr iter))))

(print (k-means test-data [[1 1] [5 3]] 10))
;(print (dist [1 1 1 1] [2 2 2 2]))
