; MIT License
;
; Copyright (c) 2018 - 2019 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

(defmutable! body (internal js-property document body))

(defn create-element! [name]
  (internal js document.createElement (->str name)))

(defn create-element-namespace! [name namespace]
  (internal js document.createElementNS namespace (->str name)))

(defn create-text-node! [text]
  (internal js document.createTextNode (->str text)))

(defn append-child! [element child]
  (internal js-method element appendChild child))

(defn set-attribute! [element name value]
  (internal js-method element setAttribute (->str name) (->str value)))

(defn nth-child [element index]
  (internal js-method element children.item index))

(defn attributes-names [element]
  (internal js-method element getAttributeNames))

(defn to-element [tree namespace]
  (if (list? tree)
    (let [type       (first tree)
          attributes (second tree)
          body       (second-rest tree)]
      (defmutable! element (if namespace
                             (create-element-namespace! (first tree) namespace)
                             (create-element! (first tree))))
      (map-pairs attributes (fn [key value]
        (set-attribute! element key value)))
      (each body (fn [child]
        (append-child! element (to-element child namespace))))
      element)
    (create-text-node! tree)))

(defn html-to-element [html]
  (to-element html nil))

(defn svg-to-element [svg]
  (to-element svg "http://www.w3.org/2000/svg"))
