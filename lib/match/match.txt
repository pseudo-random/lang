; MIT License
;
; Copyright (c) 2018 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.

(import str)

(def _ :_)
(def & :&)

; TODO: match [1 &] with pattern [1 & _]

(defn fn? [x]
  (= (typeof (fn [] nil)) (typeof x)))

(defn both? [a b what?]
  (and (what? a) (what? b)))

(defn either? [a b what?]
  (!= (what? a) (what? b)))

(defn next? [list a]
  (and (not-empty? list)
       (= (first list) a)))

(defn match-list? [x pattern]
  (cond
    (both? x pattern empty?)
      []
    (next? pattern &)
      (match? x (second pattern))
    (either? x pattern empty?)
      nil
    :else
      ; TODO: Nicer code -> use ->until
      (let [match-first (match? (first x) (first pattern))
            match-rest  (match-list? (rest x) (rest pattern))]
        (if (and match-first match-rest)
          (concat match-first match-rest)
          nil))))

(defn match? [x pattern]
  (cond
    (both? x pattern list?) (match-list? x pattern)
    (= pattern _)           [x]
    (fn? pattern)           (if (pattern x) [x] nil)
    (= x pattern)           []
    :else                   nil))

(import test)
(test/test "match?/int"
  (match? 1 _) = [1]
  (match? 2 _) = [2]
  (match? 3 _) = [3]
  (match? 3 1) = nil
  (match? 1 1) = [])

(test/test "match?/float"
  (match? 1.5 1.15)  = nil
  (match? 1.5 1.5)   = []
  (match? 3.14 3.14) = []

  (match? 3.14 _)    = [3.14])

(test/test "match?/str"
  (match? "123" "123") = []
  (match? "abc" "123") = nil
  (match? "ABC" _)     = ["ABC"]

  (match? "abc" [\a \b \c]) = nil

  (match? "abc" "a__") = []
  (match? "abc" (str/pattern [\a _ _])) = ["bc"]
  (match? "hello" (str/pattern ["h" ["ello" "i" "ey"]])) = [])

(test/test "match?/list"
  (match? [] [])             = []
  (match? [1 2 3] [1 2 3])   = []
  (match? [[] []] [[] []])   = []

  (match? [1 2 4] [1 2 3])   = nil
  (match? [1 2 3] [1 2 3 4]) = nil
  (match? [1 2 3 4] [1 2 3]) = nil
  (match? [] [1 2 3])        = nil

  (match? [1] [_])           = [1]
  (match? [2] [_])           = [2]
  (match? [1 2 3] [_])       = nil
  (match? [1 2 3] _)         = [[1 2 3]]
  (match? [1 2 3] [_ _])     = nil
  (match? [1 2] [_ _])       = [1 2]
  (match? [[1] 2] [[_] _])   = [1 2]
  (match? [1 2] [[_] _])     = nil)

(test/test "match?/list/rest"
  (match? [1 2 3] [1 & _])   = [[2 3]]
  (match? [] [1 & _])        = nil
  (match? [1] [& _])         = [[1]]
  (match? [] [& _])          = [[]]

  (match? [1 2] [1 & [2]])   = []
  (match? [1 2] [1 & []])    = nil
  (match? [1 2] [1 & [3]])   = nil

  (match? [1 2] [1 & [2 & _]]) = [[]])

(test/test "match?/fn"
  (match? 1 int?)      = [1]
  (match? 3.14 float?) = [3.14]
  (match? "abc" str?)  = ["abc"]
  (match? true bool?)  = [true]

  (match? [1 \a] [int? char?]) = [1 \a]

  (match? 3.14 int?)  = nil
  (match? false int?) = nil)
