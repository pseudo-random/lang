; MIT License
;
; Copyright (c) 2018 - 2019 pseudo-random <josh.leh.2018@gmail.com>
;
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.


(defn printm text
  (each text write)
  (terpri))

(defn test params
  (def name (first params))
  (def tests
    (-> (rest params)
        (reshape-width 3)))

  (def results (map tests (fn [test]
                 (let [res (first test)
                       operator (second test)
                       expected (third test)]
                   (if (operator res expected)
                     [true res expected]
                     [false res expected])))))

  (def count (-> (filter results (fn [x] (first x)))
                 (len)))

  (def test-count (len tests))

  (write name)
  (if (= count test-count)
    (print "\t[Passed]")
    (do (printm "\t[" count "/" test-count "]")
        (each-it results (fn [it x]
                           (when (= (first x) false)
                             (printm "  (" it ") Test Failed "
                                     "Result: " (prn (second x))
                                     " Expected: " (prn (third x)))))))))

(import random)

(deftype error what? why?)
(defn error? [x] (= (typeof x) (typeof (error* "" ""))))

(deftype enumerated index value)

(defn enumerate [list index]
  (if (empty? list)
    list
    (prepend (enumerate (rest list) (incr index))
             (enumerated* index (first list)))))

(defn failed? [result]
  (or (error? result/value)
      (not (true? result/value))))

(defn format-error [result]
  (format "  (" result/index ") " result/value/what? " " result/value/why?))

(defn format-errors [errors]
  (-> (map errors format-error)
      (interpose "\n")))

(defn unittest args
  (let [name    (first args)
        results (rest args)
        failed  (-> (enumerate results 0)
                    (filter failed?))
        count   (len results)]
    (if (empty? failed)
      (print (format name " [Passed]"))
      (print (format name " [" (len failed) "/" count "]\n"
                     (format-errors failed))))))

(defn eq [x y]
  (if (= x y)
    true
    (error* "Equality check failed"
            (format "Result: " x " Expected: " y))))

(defn property [name count func]
  (if (= count 0)
    true
    (let [res (func)]
      (if (error? res)
        res
        (recur name (decr count) func)))))

(defn int! [from to]
  (random/randint! from to))

;(unittest "+"
;  (eq (+ 1 2)  3)
;  (eq (+ 0 0)  0)
;  (eq (+ 2 4)  6)
;  (eq (+ -1 1) 0)
;  ; (= (+ 1 0) 1)
;
;  (property "indentity" 100 (fn []
;    (let [x (int! -1024 1024)]
;      (eq x (+ x 0)))))
;
;  (property "commutative" 100 (fn []
;    (let [x (int! -1024 1024)
;          y (int! -1024 1024)]
;      (eq (+ x y) (+ y x))))))
